#---*- Makefile -*-------------------------------------------------------

# Use "make schemas schemas_html_pretty=true" to apply OPTIMADE styling to the html pages

# Use "make schemas schemas_html_ext=true" to generate html files with .html extensions also for files meant to be served
# without extensions, which is useful for hosting, e.g., on github that automatically redirects URLs without extensions.

ifeq ($(origin schemas_html_pretty), undefined)
	OPTIMADE_HTML_HEADER ?=
	OPTIMADE_HTML_TOP ?=
else
	OPTIMADE_HTML_HEADER = <link rel="stylesheet" type="text/css" media="screen" href="https://www.optimade.org/assets/css/style.css" /><style>body {background: \#f2f2f2;} html {margin: 0 auto; max-width: 900px;}</style>
	OPTIMADE_HTML_TOP = <a href="https://www.optimade.org/"><img style="margin: 0.5em; float: left" src="https://avatars0.githubusercontent.com/u/23107754" width="10%" /></a><div style="width: 100%; clear: both"></div>
endif

META_SCHEMAS := $(wildcard schemas/src/meta/*/optimade/*.yaml)
META_SCHEMAS_JSON := $(patsubst schemas/src/%.yaml,schemas/output/%.json,$(META_SCHEMAS))
META_SCHEMAS_ARGS := $(foreach schema,$(META_SCHEMAS_JSON),--schema $(schema))

SCHEMAS := $(wildcard schemas/src/releases/v*.*.*/*/*/*/*/*.yaml schemas/src/releases/v*.*.*/*/*/*/*.yaml schemas/src/releases/v*.*.*/*/*/*.yaml schemas/src/releases/v*.*.*/*/*.yaml schemas/src/releases/v*.*.*/*.yaml)
SCHEMAS_DEFS := $(wildcard schemas/src/defs/v*.*/*/*/*/*/*.yaml schemas/src/defs/v*.*/*/*/*/*.yaml schemas/src/defs/v*.*/*/*/*.yaml schemas/src/defs/v*.*/*/*.yaml schemas/src/defs/v*.*/*.yaml)
SCHEMAS_JSON = $(patsubst schemas/src/%.yaml,schemas/output/%.json,$(SCHEMAS) $(SCHEMAS_DEFS))
SCHEMAS_MD = $(patsubst schemas/src/%.yaml,schemas/output/%.md,$(SCHEMAS) $(SCHEMAS_DEFS))

ifeq ($(origin schemas_html_ext), undefined)
	SCHEMAS_HTML = $(patsubst schemas/src/%.yaml,schemas/output/%,$(SCHEMAS) $(SCHEMAS_DEFS))
	SCHEMAS_HTML_EXT =
else
	SCHEMAS_HTML = $(patsubst schemas/src/%.yaml,schemas/output/%.html,$(SCHEMAS) $(SCHEMAS_DEFS))
	SCHEMAS_HTML_EXT = .html
endif

EXT_SCHEMAS := $(filter-out external/json-schema/LICENSE, $(wildcard external/json-schema/*))
EXT_SCHEMAS_ARGS := $(foreach schema,$(EXT_SCHEMAS),--schema $(schema))

INDEXES := $(wildcard schemas/src/releases/*)
INDEXES_HTML := $(patsubst schemas/src/%,schemas/output/%/index.html,$(INDEXES))

OPTIMADE_VERSION := $(shell awk 'NR==2 && /OPTIMADE API specification/ { sub(/~develop/, "", $$NF); print $$NF; exit }' optimade.rst)
ifeq ($(OPTIMADE_VERSION),)
  OPTIMADE_VERSION_SUBST=
else
  OPTIMADE_VERSION_SUBST=--sub '$$$${OPTIMADE_VERSION}' "$(OPTIMADE_VERSION)"
endif

.PHONY: schemas schemas_meta schemas_json schemas_docs schemas_html schemas_symlinks

schemas: schemas_meta schemas_json schemas_docs schemas_html
schemas_meta: $(META_SCHEMAS_JSON)
schemas_json: $(SCHEMAS_JSON)
schemas_docs: $(SCHEMAS_MD)
schemas_html: $(SCHEMAS_HTML) $(INDEXES_HTML)

schemas_symlinks:
	cd schemas/src/; \
	for KIND in meta releases; do \
          mkdir -p ../output/$$KIND; \
	  ( cd "$$KIND";\
	  for dir in *; do \
	    if [ -h "$$dir" -a ! -h "../../output/$$KIND/$$dir" ]; then \
	      ln -s "$$(readlink "$$dir")" "../../output/$$KIND/$$dir" ;\
	    elif [ -d "$$dir" -a ! -e "../../output/$$KIND/$$dir" ]; then \
	      mkdir "../../output/$$KIND/$$dir" ;\
	    fi ;\
	  done \
	  ) \
	done

# Macro to extract the third (defs, releases) and fourth (version) path segments of the target dependency to compose a suitable basedir value for process_schemas
basedir = "schemas/src/$(word 3,$(subst /, ,$<))/$(word 4,$(subst /, ,$(1)))/"
# Marco to create a suitable URL baseid by processing the version number in the fourth path segment of the target dependency by removing the patch version if present
baseid = "https://schemas.optimade.org/defs/$(if $(findstring 3,$(words $(subst ., ,$(word 4,$(subst /, ,$(1)))))),$(basename $(word 4,$(subst /, ,$(1)))),$(word 4,$(subst /, ,$(1))))/"

$(META_SCHEMAS_JSON): schemas/output/%.json: schemas/src/%.yaml | schemas_symlinks
	mkdir -p "$(dir $@)"
	tests/scripts/process_schemas.py --remove-null $(OPTIMADE_VERSION_SUBST) --basedir "schemas/src" --baseid="https://schemas.optimade.org/" $(EXT_SCHEMAS_ARGS) --output "$@" "$<"

$(SCHEMAS_JSON): schemas/output/%.json: schemas/src/%.yaml $(META_SCHEMAS_JSON) | schemas_symlinks
	mkdir -p "$(dir $@)"
	tests/scripts/process_schemas.py --remove-null --clean-inner-schemas $(OPTIMADE_VERSION_SUBST) --basedir $(call basedir,$<) --baseid $(call baseid,$<) $(META_SCHEMAS_ARGS) $(EXT_SCHEMAS_ARGS) --output "$@" "$<"

$(SCHEMAS_MD): schemas/output/%.md: schemas/src/%.yaml | schemas_symlinks
	mkdir -p "$(dir $@)"
	tests/scripts/process_schemas.py --remove-null --clean-inner-schemas -f md $(OPTIMADE_VERSION_SUBST) --basedir $(call basedir,$<) --baseid $(call baseid,$<) --output "$@" "$<"

$(SCHEMAS_HTML): schemas/output/%$(SCHEMAS_HTML_EXT): schemas/src/%.yaml | schemas_symlinks
	mkdir -p "$(dir $@)"
	tests/scripts/process_schemas.py --remove-null --clean-inner-schemas -f html $(OPTIMADE_VERSION_SUBST) --basedir $(call basedir,$<) --baseid $(call baseid,$<) --html-header '$(OPTIMADE_HTML_HEADER)' --html-top '$(OPTIMADE_HTML_TOP)' --output "$@" "$<"

$(INDEXES_HTML): schemas/output/releases/%/index.html: schemas/src/releases/% $(SCHEMAS)
	mkdir -p "$(dir $@)"
	tests/scripts/process_schemas.py --index --basedir $(call basedir,$<) --baseid $(call baseid,$<) -f html --html-header '$(OPTIMADE_HTML_HEADER)' --html-top '$(OPTIMADE_HTML_TOP)' $(EXT_SCHEMAS_ARGS) --output "$@" "$<"

.PHONY: clean clean_schemas

clean: clean_schemas

clean_schemas:
	rm -rf schemas/output

.PHONY: check_schemas_variables

check_schemas_variables:
	@echo "SCHEMAS = $(SCHEMAS)"
	@echo "SCHEMAS_JSON = $(SCHEMAS_JSON)"
	@echo ""
	@echo "META_SCHEMAS = $(META_SCHEMAS)"
	@echo "META_SCHEMAS_JSON = $(META_SCHEMAS_JSON)"
	@echo "META_SCHEMAS_ARGS = $(META_SCHEMAS_ARGS)"
	@echo ""
	@echo "OPTIMADE_VERSION = $(OPTIMADE_VERSION)"
	@echo "OPTIMADE_VERSION_SUBST = $(OPTIMADE_VERSION_SUBST)"


.PHONY: validate_schemas

validate_meta_schemas: schemas
	tests/scripts/validate_json_schema.py schemas/output/meta/current/optimade/property_definition.json external/json-schema/schema
	tests/scripts/validate_json_schema.py schemas/output/meta/current/optimade/physical_unit_definition.json external/json-schema/schema

validate_schemas: schemas validate_meta_schemas
	tests/scripts/validate_json_schema.py schemas/tests/example-structures.optimade schemas/output/json-schema/current/optimade.json
