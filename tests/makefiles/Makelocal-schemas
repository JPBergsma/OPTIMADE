#---*- Makefile -*-------------------------------------------------------

# Targets related to handling the schema files
SCHEMAS := $(wildcard schemas/src/*/*/*/*/*/*/*.yaml schemas/src/*/*/*/*/*/*.yaml schemas/src/*/*/*/*/*.yaml schemas/src/*/*/*/*.yaml schemas/src/*/*/*.yaml)
SCHEMAS_OUT = $(patsubst schemas/src/%.yaml,schemas/output/%.json,$(SCHEMAS))

EXT_SCHEMAS := $(filter-out external/json-schema/LICENSE, $(wildcard external/json-schema/*))
EXT_SCHEMAS_ARGS := $(foreach schema,$(EXT_SCHEMAS),--schema $(schema))

META_SCHEMAS := $(wildcard schemas/src/meta/current/optimade/*.yaml)
META_SCHEMAS_OUT := $(patsubst schemas/src/%.yaml,schemas/output/%.json,$(META_SCHEMAS))
META_SCHEMAS_ARGS := $(foreach schema,$(META_SCHEMAS_OUT),--schema $(schema))

OPTIMADE_VERSION := $(shell awk 'NR==2 && /OPTIMADE API specification/ { sub(/~develop/, "", $$NF); print $$NF; exit }' optimade.rst)
ifeq ($(OPTIMADE_VERSION),)
  OPTIMADE_VERSION_SUBST=
else
  OPTIMADE_VERSION_SUBST=--sub "{OPTIMADE_VERSION}" "$(OPTIMADE_VERSION)"
endif

.PHONY: schemas schemas_vers_symlinks

schemas: schemas_vers_symlinks $(SCHEMAS_OUT) $(STANDARDS_MD_OUT)

schemas_vers_symlinks:
	cd schemas/src; \
	for KIND in *; do \
          mkdir -p ../output/$$KIND; \
	  ( cd "$$KIND";\
	  for dir in *; do \
	    if [ -h "$$dir" -a ! -h "../../output/$$KIND/$$dir" ]; then \
	      ln -s "$$(readlink "$$dir")" "../../output/$$KIND/$$dir" ;\
	    fi ;\
	  done \
	  ) \
	done

schemas/output/meta/%.json: schemas/src/meta/%.yaml | schemas_vers_symlinks
	mkdir -p "$(dir $@)"
	tests/scripts/process_schemas.py --remove-null $(OPTIMADE_VERSION_SUBST) --basedir "schemas/src" --baseid="https://schemas.optimade.org/" --output "$@" "$<" --schema external/json-schema/schema $(EXT_SCHEMAS_ARGS)

schemas/output/%.json: schemas/src/%.yaml $(META_SCHEMAS_OUT) | schemas_vers_symlinks
	mkdir -p "$(dir $@)"
	tests/scripts/process_schemas.py --remove-null --clean-inner-schemas $(OPTIMADE_VERSION_SUBST) --basedir "schemas/src" --baseid="https://schemas.optimade.org/" --output "$@" "$<" $(META_SCHEMAS_ARGS) $(EXT_SCHEMAS_ARGS)

schemas/output/%.md: schemas/src/%.yaml | schemas_vers_symlinks
	mkdir -p "$(dir $@)"
	tests/scripts/process_schemas.py -f md --remove-null $(OPTIMADE_VERSION_SUBST) --basedir "schemas/src" --baseid="https://schemas.optimade.org/" --output "$@" "$<"

.PHONY: clean clean_schemas

clean: clean_schemas

clean_schemas:
	rm -rf schemas/output

.PHONY: check_schemas_variables

check_schemas_variables:
	@echo "SCHEMAS = $(SCHEMAS)"
	@echo "SCHEMAS_OUT = $(SCHEMAS_OUT)"
	@echo ""
	@echo "META_SCHEMAS = $(META_SCHEMAS)"
	@echo "META_SCHEMAS_OUT = $(META_SCHEMAS_OUT)"
	@echo "META_SCHEMAS_ARGS = $(META_SCHEMAS_ARGS)"
	@echo ""
	@echo "OPTIMADE_VERSION = $(OPTIMADE_VERSION)"
	@echo "OPTIMADE_VERSION_SUBST = $(OPTIMADE_VERSION_SUBST)"


.PHONY: validate_schemas

validate_meta_schemas: schemas
	tests/scripts/validate_json_schema.py schemas/output/meta/current/optimade/property_definition.json external/json-schema/schema
	tests/scripts/validate_json_schema.py schemas/output/meta/current/optimade/physical_unit_definition.json external/json-schema/schema

validate_schemas: schemas validate_meta_schemas
	tests/scripts/validate_json_schema.py schemas/tests/example-structures.optimade schemas/output/json-schema/current/optimade.json
